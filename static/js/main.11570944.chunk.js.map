{"version":3,"sources":["QueryResource.js","App.js","serviceWorker.js","index.js"],"names":["QueryResource","addItem","src","title","link","author","score","date","misc","createItem","this","queries","SourceHackerNews","SourceGithubTrending","SourceDevto","SourceSubreddit","source","miscellaneous","Promise","all","map","x","a","query","response","process","add","take","promises","data","forEach","storyID","i","push","axios","get","storyResponses","scoreTotal","reduce","gross","storyResponse","url","by","Date","time","language","currentPeriodStars","setHours","info","name","description","stars","subreddit","children","ups","downs","item","created","public_reactions_count","user","created_at","tags","App","props","onKeyDown","bind","onScroll","scrollTo","resource","increment","state","results","selectedIndex","document","addEventListener","then","arrays","flatten","array","concat","setState","sort","y","catch","err","console","error","event","key","Math","min","length","max","shuffle","window","open","body","html","documentElement","documentHeight","scrollHeight","offsetHeight","clientHeight","scrollY","innerHeight","temporaryValue","randomIndex","currentIndex","floor","random","mainProps","className","listProps","result","listItemProps","cardProps","onClick","infoProps","sourceProps","scoreProps","toLocaleString","dateProps","textProps","dangerouslySetInnerHTML","__html","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.11570944.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default class QueryResource {\n    constructor() {\n        const addItem = (src, title, link, author, score, date, misc) => this.createItem(src, title, link, author, score, date, misc);\n        this.queries = [\n            new SourceHackerNews(addItem, 100),\n            new SourceGithubTrending(addItem),\n            new SourceGithubTrending(addItem, \"javascript\"),\n            new SourceGithubTrending(addItem, \"typescript\"),\n            new SourceGithubTrending(addItem, \"shell\"),\n            new SourceGithubTrending(addItem, \"go\"),\n            new SourceGithubTrending(addItem, \"css\"),\n            new SourceGithubTrending(addItem, \"html\"),\n            new SourceGithubTrending(addItem, \"c%23\"),\n            new SourceGithubTrending(addItem, \"c%2B%2B\"),\n            new SourceDevto(addItem),\n            new SourceSubreddit(addItem, \"r/appideas\"),\n            new SourceSubreddit(addItem, \"r/bash\"),\n            new SourceSubreddit(addItem, \"r/bashtricks\"),\n            new SourceSubreddit(addItem, \"r/commandline\"),\n            new SourceSubreddit(addItem, \"r/coolgithubprojects\"),\n            new SourceSubreddit(addItem, \"r/cpp\"),\n            new SourceSubreddit(addItem, \"r/csharp\"),\n            new SourceSubreddit(addItem, \"r/css\"),\n            new SourceSubreddit(addItem, \"r/docker\"),\n            new SourceSubreddit(addItem, \"r/dotnet\"),\n            new SourceSubreddit(addItem, \"r/lightbulb\"),\n            new SourceSubreddit(addItem, \"r/linux\"),\n            new SourceSubreddit(addItem, \"r/node\"),\n            new SourceSubreddit(addItem, \"r/programming\"),\n            new SourceSubreddit(addItem, \"r/python\"),\n            new SourceSubreddit(addItem, \"r/raspberry_pi\"),\n            new SourceSubreddit(addItem, \"r/raspberry_pi_projects\"),\n            new SourceSubreddit(addItem, \"r/reactjs\"),\n            new SourceSubreddit(addItem, \"r/sideproject\"),\n            new SourceSubreddit(addItem, \"r/somebodymakethis\"),\n            new SourceSubreddit(addItem, \"r/startup_ideas\"),\n            new SourceSubreddit(addItem, \"r/startups\"),\n            new SourceSubreddit(addItem, \"r/typescript\"),\n        ];\n    }\n    \n    createItem(source, title, link, author, score, date, miscellaneous = \"\") {\n        return {\n            source: source,\n            title: title,\n            link: link,\n            author: author,\n            score: score,\n            date: date,\n            miscellaneous: miscellaneous\n        };\n    }\n\n    async query() {\n        return await Promise.all(this.queries.map(async (x) => {\n            const response = await x.query();\n            return await x.process(response);\n        }));\n    }\n}\n\nclass SourceHackerNews {\n    constructor(add, take) {\n        this.add = add;\n        this.take = take;\n    }\n\n    async process(response) {\n        const promises = [];\n        response.data.forEach((storyID, i) => {\n            if (i < this.take) {\n                promises.push(axios.get(`https://hacker-news.firebaseio.com/v0/item/${storyID}.json`));\n            }\n        });\n        const storyResponses = await Promise.all(promises);\n        const scoreTotal = storyResponses.reduce((gross, x) => gross + x.data.score, 0);\n        return storyResponses.map(storyResponse => {\n            return this.add(\n                \"hn\",\n                storyResponse.data.title,\n                storyResponse.data.url,\n                storyResponse.data.by, \n                storyResponse.data.score / scoreTotal, \n                new Date(storyResponse.data.time * 1e3), \n                `<br/>score: ${storyResponse.data.score}`);\n        });\n    }\n\n    async query() {\n        return await axios.get(\"https://hacker-news.firebaseio.com/v0/topstories.json\");\n    }\n}\n\nclass SourceGithubTrending {\n    constructor(add, language = null) {\n        this.add = add;\n        this.language = language;\n    }\n\n    async process(response) {\n        const scoreTotal = response.data.reduce((gross, x) => gross + x.currentPeriodStars, 0);\n        const date = new Date();\n        date.setHours(0, 0, 0, 0);\n        return response.data.map((info) => {\n            return this.add(\n                `gh/${this.language}`, \n                info.name,\n                info.url,\n                info.author,\n                info.currentPeriodStars / scoreTotal,\n                date,\n                `<br/>language: ${info.language}<br/>description: ${info.description}<br/>score: ${info.stars}`);\n        });\n    }\n\n    async query() {\n        return await (this.language ? axios.get(`https://ghapi.huchen.dev/repositories?since=daily&language=${this.language}`) : axios.get(\"https://ghapi.huchen.dev/repositories?since=daily\"));\n    }\n}\n\nclass SourceSubreddit {\n    constructor(add, subreddit) {\n        this.add = add;\n        this.subreddit = subreddit;\n    }\n\n    async process(response) {\n        const scoreTotal = response.data.data.children.reduce((gross, x) => gross + (x.data.ups - x.data.downs), 0);\n        return response.data.data.children.map(item => {\n            return this.add(\n                this.subreddit,\n                item.data.title,\n                item.data.url,\n                item.data.author,\n                (item.data.ups - item.data.downs) / scoreTotal, \n                new Date(item.data.created * 1e3), \n                `<br/>score: ${(item.data.ups - item.data.downs)}`);\n        });\n    }\n\n    async query() {\n        return await axios.get(`https://www.reddit.com/${this.subreddit}.json?limit=25`);\n    }\n}\n\nclass SourceDevto {\n    constructor(add) {\n        this.add = add;\n    }\n\n    async process(response) {\n        const scoreTotal = response.data.reduce((gross, x) => gross + x.public_reactions_count, 0);\n        return response.data.map(item => {\n            return this.add(\n                \"devto\", \n                item.title, \n                item.url, \n                item.user.name, \n                item.public_reactions_count / scoreTotal,\n                new Date(item.created_at),\n                `<br/>tags: ${item.tags}<br/>description: ${item.description}<br/>score: ${item.public_reactions_count}`);\n        });\n    }\n\n    async query() {\n        return await axios.get(\"https://dev.to/api/articles\");\n    }\n}","import React from 'react';\nimport './App.css';\nimport QueryResource from './QueryResource'\n\nexport default class App extends React.Component {\n  constructor(props) {\n      super(props);\n      this.onKeyDown = this.onKeyDown.bind(this);\n      this.onScroll = this.onScroll.bind(this);\n      this.scrollTo = this.scrollTo.bind(this);\n      this.resource = new QueryResource();\n      this.increment = 15;\n      this.state = {\n        results: [],\n        selectedIndex: -1\n      };\n  }\n\n  componentDidMount() {\n      document.addEventListener(\"keydown\", this.onKeyDown);\n      document.addEventListener(\"scroll\", this.onScroll);\n      this.resource.query()\n        .then(arrays => {\n          let flatten = [];\n          arrays.forEach(array => {\n            flatten = flatten.concat(array);\n          });\n          this.setState({results: flatten.sort((x, y) => (x.score <= y.score) ? 1 : -1)})\n        })\n        .catch(err => console.error(err));\n  }\n\n  onKeyDown(event) {\n    switch (event.key) {\n      case \"a\":\n          this.setState(state => ({results: state.results.sort((x, y) => (x.score <= y.score) ? -1 : 1)}));\n          break;\n      case \"d\":\n          this.setState(state => ({results: state.results.sort((x, y) => (x.score <= y.score) ? 1 : -1)}));\n          break;\n      case \"i\":\n          this.setState({selectedIndex: 0}, () => this.scrollTo());\n          break;\n      case \"j\":\n          this.setState(state => ({selectedIndex: Math.min(state.selectedIndex + 1, state.results.length - 1)}), () => this.scrollTo());\n          break;\n      case \"k\":\n          this.setState(state => ({selectedIndex: Math.max(0, state.selectedIndex - 1)}), () => this.scrollTo());\n          break;\n      case \"s\":\n          this.setState(state => ({results: this.shuffle(state.results)}));\n          break;\n      case \"Enter\":\n          if (this.state.selectedIndex > -1) {\n              window.open(this.state.results[this.state.selectedIndex].link);\n          }\n          break;\n      default:\n          break;\n    }\n  }\n\n  onScroll(event) {\n      const body = document.body,\n          html = document.documentElement,\n          documentHeight = Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n      if (window.scrollY >= documentHeight - window.innerHeight) {\n          this.setState(state => ({selectedIndex: state.selectedIndex + this.increment}));\n      }\n  }\n\n  shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  render() {\n      const mainProps = {\n          className: \"main\"\n        },\n        listProps = {\n          className: \"list\"\n        };\n        return (\n          <div {...mainProps}>\n            <ul {...listProps}>\n              {this.state.results.map((result, i) => {\n                if (i < (this.state.selectedIndex + this.increment)) {\n                  const listItemProps = {\n                      key: i\n                    },\n                    cardProps = {\n                      className: `card ${i === this.state.selectedIndex ? \"selected\" : \"\"}`,\n                      onClick: () => window.open(result.link)\n                    },\n                    infoProps = {\n                      className: \"info wrapText\",\n                      children: `${i} of ${this.state.results.length}`\n                    },\n                    sourceProps = {\n                      className: \"source wrapText\",\n                      children: `${result.source}: ${result.author}`\n                    },\n                    scoreProps = {\n                      className: \"score wrapText\",\n                      children: result.score.toLocaleString(\"en-US\")\n                    },\n                    dateProps = {\n                      className: \"date wrapText\",\n                      children: `${(((new Date() - result.date)) / 36e5).toLocaleString(\"en-US\")} hours ago (${result.date.toLocaleString(\"en-US\")})`\n                    },\n                    textProps = {\n                      className: \"text wrapText\",\n                      dangerouslySetInnerHTML: {\n                        __html: `${result.title}`\n                      }\n                    }\n                  return (\n                    <li {...listItemProps}>\n                      <div {...cardProps}>\n                        <div {...infoProps} />\n                        <div {...sourceProps} />\n                        <div {...scoreProps} />\n                        <div {...dateProps} />\n                        <div {...textProps} />\n                      </div>\n                    </li>\n                  );\n                }\n              })}\n            </ul>\n          </div>\n        );\n  }\n\n  scrollTo() {\n    window.scrollTo(0, Math.max(0, this.state.selectedIndex * (126) - 200));\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}